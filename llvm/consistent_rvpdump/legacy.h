#ifndef _RVP_LEGACY_H_ 
#define _RVP_LEGACY_H_ 

#include <stdint.h>
#include "nbcompat.h"

/**
 * Enumeration of all types of events considered during logging and prediction.
 *
 * @author TraianSF
 */
typedef enum _legacy_op {
	READ = 0,
	WRITE,
	
	/**
	 * Atomic events that are used only in the front-end.
	 */
	ATOMIC_READ,
	ATOMIC_WRITE,
	ATOMIC_READ_THEN_WRITE,
	
	/**
	 * Event generated after acquiring an intrinsic lock or write lock.
	 */
	WRITE_LOCK,
	
	/**
	 * Event generated before releasing an intrinsic lock or write lock.
	 */
	WRITE_UNLOCK,
	
	/**
	 * Event generated after acquiring a read lock, i.e.,
	 * {@code ReadWriteLock#readLock()#lock()}.
	 */
	READ_LOCK,
	
	/**
	 * Event generated before releasing a read lock, i.e.,
	 * {@code ReadWriteLock#readLock()#unlock()}.
	 */
	READ_UNLOCK,
	
	/**
	 * Event generated before calling {@link Object#wait()} or
	 * {@link Condition#await()}.
	 */
	WAIT_REL,
	
	/**
	 * Event generated after a thread is awakened from {@link Object#wait()} or
	 * {@link Condition#await()} for whatever reason (e.g., spurious wakeup,
	 * being notified, or being interrupted).
	 */
	WAIT_ACQ,
	
	/**
	 * Event generated before calling {@code Thread#start()}.
	 */
	START,
	
	/**
	 * Event generated after a thread is awakened from {@code Thread#join()}
	 * because the joining thread finishes.
	 */
	JOIN,
	
	/**
	 * Event generated after entering the class initializer code, i.e.
	 * {@code <clinit>}.
	 */
	CLINIT_ENTER,
	
	/**
	 * Event generated right before exiting the class initializer code, i.e.
	 * {@code <clinit>}.
	 */
	CLINIT_EXIT,
	
	INVOKE_METHOD,
	
	FINISH_METHOD,
	
	/**
	 * Event generated before acquiring of any type of lock is attempted.
	 * Required by, and only used for, deadlock detection, where the intention
	 * to acquire a lock is more relevant than actually the acquisition itself.
	 */
	//TODO(TraianSF): Consider moving this with the other SYNC events
	PRE_LOCK,
	
	/**
	 * Event generated by the parent process after a succesfull fork.
	 */
	FORK
} legacy_op_t;

typedef struct _legacy_event {
	uint64_t gid;
	uint64_t tid;
	uint32_t stmtid;
	uint64_t addr;
	uint64_t value;
	uint8_t type;
} __packed legacy_event_t;

typedef struct _thd_record {
	uint64_t newtid;
	uint64_t curtid;
	uint32_t stmtid;
} __packed thd_record_t;

#endif /* _RVP_LEGACY_H_ */
